/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var actor_pb = require('../actor_pb.js');
goog.exportSymbol('proto.remote.ActorPidRequest', null, global);
goog.exportSymbol('proto.remote.ActorPidResponse', null, global);
goog.exportSymbol('proto.remote.MessageBatch', null, global);
goog.exportSymbol('proto.remote.MessageEnvelope', null, global);
goog.exportSymbol('proto.remote.Unit', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.remote.MessageBatch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.remote.MessageBatch.repeatedFields_, null);
};
goog.inherits(proto.remote.MessageBatch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.remote.MessageBatch.displayName = 'proto.remote.MessageBatch';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.remote.MessageBatch.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.remote.MessageBatch.prototype.toObject = function(opt_includeInstance) {
  return proto.remote.MessageBatch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.remote.MessageBatch} msg The msg instance to transform.
 * @return {!Object}
 */
proto.remote.MessageBatch.toObject = function(includeInstance, msg) {
  var f, obj = {
    typeNamesList: jspb.Message.getField(msg, 1),
    targetNamesList: jspb.Message.getField(msg, 2),
    envelopesList: jspb.Message.toObjectList(msg.getEnvelopesList(),
    proto.remote.MessageEnvelope.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.remote.MessageBatch}
 */
proto.remote.MessageBatch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.remote.MessageBatch;
  return proto.remote.MessageBatch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.remote.MessageBatch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.remote.MessageBatch}
 */
proto.remote.MessageBatch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addTypeNames(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addTargetNames(value);
      break;
    case 3:
      var value = new proto.remote.MessageEnvelope;
      reader.readMessage(value,proto.remote.MessageEnvelope.deserializeBinaryFromReader);
      msg.addEnvelopes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.remote.MessageBatch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.remote.MessageBatch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.remote.MessageBatch} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.remote.MessageBatch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypeNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getTargetNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getEnvelopesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.remote.MessageEnvelope.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string type_names = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.remote.MessageBatch.prototype.getTypeNamesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1));
};


/** @param {!Array.<string>} value */
proto.remote.MessageBatch.prototype.setTypeNamesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.remote.MessageBatch.prototype.addTypeNames = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.remote.MessageBatch.prototype.clearTypeNamesList = function() {
  this.setTypeNamesList([]);
};


/**
 * repeated string target_names = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.remote.MessageBatch.prototype.getTargetNamesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<string>} value */
proto.remote.MessageBatch.prototype.setTargetNamesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.remote.MessageBatch.prototype.addTargetNames = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.remote.MessageBatch.prototype.clearTargetNamesList = function() {
  this.setTargetNamesList([]);
};


/**
 * repeated MessageEnvelope envelopes = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.remote.MessageEnvelope>}
 */
proto.remote.MessageBatch.prototype.getEnvelopesList = function() {
  return /** @type{!Array.<!proto.remote.MessageEnvelope>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.remote.MessageEnvelope, 3));
};


/** @param {!Array.<!proto.remote.MessageEnvelope>} value */
proto.remote.MessageBatch.prototype.setEnvelopesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.remote.MessageEnvelope=} opt_value
 * @param {number=} opt_index
 * @return {!proto.remote.MessageEnvelope}
 */
proto.remote.MessageBatch.prototype.addEnvelopes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.remote.MessageEnvelope, opt_index);
};


proto.remote.MessageBatch.prototype.clearEnvelopesList = function() {
  this.setEnvelopesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.remote.MessageEnvelope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.remote.MessageEnvelope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.remote.MessageEnvelope.displayName = 'proto.remote.MessageEnvelope';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.remote.MessageEnvelope.prototype.toObject = function(opt_includeInstance) {
  return proto.remote.MessageEnvelope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.remote.MessageEnvelope} msg The msg instance to transform.
 * @return {!Object}
 */
proto.remote.MessageEnvelope.toObject = function(includeInstance, msg) {
  var f, obj = {
    typeId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    messageData: msg.getMessageData_asB64(),
    target: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sender: (f = msg.getSender()) && actor_pb.PID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.remote.MessageEnvelope}
 */
proto.remote.MessageEnvelope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.remote.MessageEnvelope;
  return proto.remote.MessageEnvelope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.remote.MessageEnvelope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.remote.MessageEnvelope}
 */
proto.remote.MessageEnvelope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTypeId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMessageData(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTarget(value);
      break;
    case 4:
      var value = new actor_pb.PID;
      reader.readMessage(value,actor_pb.PID.deserializeBinaryFromReader);
      msg.setSender(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.remote.MessageEnvelope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.remote.MessageEnvelope.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.remote.MessageEnvelope} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.remote.MessageEnvelope.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypeId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessageData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getTarget();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getSender();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      actor_pb.PID.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 type_id = 1;
 * @return {number}
 */
proto.remote.MessageEnvelope.prototype.getTypeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.remote.MessageEnvelope.prototype.setTypeId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes message_data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.remote.MessageEnvelope.prototype.getMessageData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes message_data = 2;
 * This is a type-conversion wrapper around `getMessageData()`
 * @return {string}
 */
proto.remote.MessageEnvelope.prototype.getMessageData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMessageData()));
};


/**
 * optional bytes message_data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMessageData()`
 * @return {!Uint8Array}
 */
proto.remote.MessageEnvelope.prototype.getMessageData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMessageData()));
};


/** @param {!(string|Uint8Array)} value */
proto.remote.MessageEnvelope.prototype.setMessageData = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 target = 3;
 * @return {number}
 */
proto.remote.MessageEnvelope.prototype.getTarget = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.remote.MessageEnvelope.prototype.setTarget = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional actor.PID sender = 4;
 * @return {?proto.actor.PID}
 */
proto.remote.MessageEnvelope.prototype.getSender = function() {
  return /** @type{?proto.actor.PID} */ (
    jspb.Message.getWrapperField(this, actor_pb.PID, 4));
};


/** @param {?proto.actor.PID|undefined} value */
proto.remote.MessageEnvelope.prototype.setSender = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.remote.MessageEnvelope.prototype.clearSender = function() {
  this.setSender(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.remote.MessageEnvelope.prototype.hasSender = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.remote.ActorPidRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.remote.ActorPidRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.remote.ActorPidRequest.displayName = 'proto.remote.ActorPidRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.remote.ActorPidRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.remote.ActorPidRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.remote.ActorPidRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.remote.ActorPidRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    kind: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.remote.ActorPidRequest}
 */
proto.remote.ActorPidRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.remote.ActorPidRequest;
  return proto.remote.ActorPidRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.remote.ActorPidRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.remote.ActorPidRequest}
 */
proto.remote.ActorPidRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKind(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.remote.ActorPidRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.remote.ActorPidRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.remote.ActorPidRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.remote.ActorPidRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKind();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.remote.ActorPidRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.remote.ActorPidRequest.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string kind = 2;
 * @return {string}
 */
proto.remote.ActorPidRequest.prototype.getKind = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.remote.ActorPidRequest.prototype.setKind = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.remote.ActorPidResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.remote.ActorPidResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.remote.ActorPidResponse.displayName = 'proto.remote.ActorPidResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.remote.ActorPidResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.remote.ActorPidResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.remote.ActorPidResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.remote.ActorPidResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    pid: (f = msg.getPid()) && actor_pb.PID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.remote.ActorPidResponse}
 */
proto.remote.ActorPidResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.remote.ActorPidResponse;
  return proto.remote.ActorPidResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.remote.ActorPidResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.remote.ActorPidResponse}
 */
proto.remote.ActorPidResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new actor_pb.PID;
      reader.readMessage(value,actor_pb.PID.deserializeBinaryFromReader);
      msg.setPid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.remote.ActorPidResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.remote.ActorPidResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.remote.ActorPidResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.remote.ActorPidResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      actor_pb.PID.serializeBinaryToWriter
    );
  }
};


/**
 * optional actor.PID pid = 1;
 * @return {?proto.actor.PID}
 */
proto.remote.ActorPidResponse.prototype.getPid = function() {
  return /** @type{?proto.actor.PID} */ (
    jspb.Message.getWrapperField(this, actor_pb.PID, 1));
};


/** @param {?proto.actor.PID|undefined} value */
proto.remote.ActorPidResponse.prototype.setPid = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.remote.ActorPidResponse.prototype.clearPid = function() {
  this.setPid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.remote.ActorPidResponse.prototype.hasPid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.remote.Unit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.remote.Unit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.remote.Unit.displayName = 'proto.remote.Unit';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.remote.Unit.prototype.toObject = function(opt_includeInstance) {
  return proto.remote.Unit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.remote.Unit} msg The msg instance to transform.
 * @return {!Object}
 */
proto.remote.Unit.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.remote.Unit}
 */
proto.remote.Unit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.remote.Unit;
  return proto.remote.Unit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.remote.Unit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.remote.Unit}
 */
proto.remote.Unit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.remote.Unit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.remote.Unit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.remote.Unit} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.remote.Unit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.remote);
